"{\"py/object\": \"document.Document\", \"auto\": true, \"title\": \"Quickstart: Create a public load balancer\", \"description\": \"\\n\\nCurrent content for this file is copied below. You should use this as a guide for the content you create, but should ensure that it is a valid executable doc and improve on readability wherever possible:\\n\\n---\\ntitle: \\\"Quickstart: Create a public load balancer - Azure CLI\\\"\\ntitleSuffix: Azure Load Balancer\\ndescription: This quickstart shows how to create a public load balancer using the Azure CLI.\\nauthor: mbender-ms\\nms.service: azure-load-balancer\\nms.topic: quickstart\\nms.date: 09/30/2024\\nms.author: mbender\\nms.custom: mvc, devx-track-azurecli, mode-api, template-quickstart, engagement-fy23\\n#Customer intent: I want to create a load balancer so that I can load balance internet traffic to VMs.\\n---\\n\\n# Quickstart: Create a public load balancer to load balance VMs using the Azure CLI\\n\\nGet started with Azure Load Balancer by using the Azure CLI to create a public load balancer and two virtual machines. Along with these resources, you deploy Azure Bastion, NAT Gateway, a virtual network, and the required subnets.\\n\\n:::image type=\\\"content\\\" source=\\\"media/quickstart-load-balancer-standard-public-portal/public-load-balancer-resources.png\\\" alt-text=\\\"Diagram of resources deployed for a standard public load balancer.\\\" lightbox=\\\"media/quickstart-load-balancer-standard-public-portal/public-load-balancer-resources.png\\\":::\\n\\n[!INCLUDE [quickstarts-free-trial-note](~/reusable-content/ce-skilling/azure/includes/quickstarts-free-trial-note.md)]\\n\\n[!INCLUDE [azure-cli-prepare-your-environment.md](~/reusable-content/azure-cli/azure-cli-prepare-your-environment.md)]\\n\\n- This quickstart requires version 2.0.28 or later of the Azure CLI. If using Azure Cloud Shell, the latest version is already installed.\\n\\n## Create a resource group\\n\\nAn Azure resource group is a logical container into which Azure resources are deployed and managed.\\n\\nCreate a resource group with [az group create](/cli/azure/group#az-group-create):\\n\\n```azurecli\\n  az group create \\\\\\n    --name CreatePubLBQS-rg \\\\\\n    --location eastus\\n```\\n\\n## Create a virtual network \\n\\nBefore you deploy VMs and test your load balancer, create the supporting virtual network and subnet.\\n\\nCreate a virtual network using [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create). The virtual network and subnet contain the resources deployed later in this article.\\n\\n```azurecli\\n  az network vnet create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --location eastus \\\\\\n    --name myVNet \\\\\\n    --address-prefixes 10.1.0.0/16 \\\\\\n    --subnet-name myBackendSubnet \\\\\\n    --subnet-prefixes 10.1.0.0/24\\n```\\n\\n## Create a public IP address\\n\\nTo access your web app on the Internet, you need a public IP address for the load balancer. \\n\\nUse [az network public-ip create](/cli/azure/network/public-ip#az-network-public-ip-create) to create the public IP for the load balancer frontend.\\n\\n```azurecli\\n  az network public-ip create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myPublicIP \\\\\\n    --sku Standard \\\\\\n    --zone 1 2 3\\n```\\n\\nTo create a zonal public IP address in Zone 1 instead, use the following command:\\n\\n```azurecli\\n  az network public-ip create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myPublicIP \\\\\\n    --sku Standard \\\\\\n    --zone 1\\n```\\n\\n## Create a load balancer\\n\\nThis section details how you can create and configure the following components of the load balancer:\\n\\n  * A frontend IP pool that receives the incoming network traffic on the load balancer\\n\\n  * A backend IP pool where the frontend pool sends the load balanced network traffic\\n\\n  * A health probe that determines health of the backend VM instances\\n\\n  * A load balancer rule that defines how traffic is distributed to the VMs\\n\\n### Create the load balancer resource\\n\\nCreate a public load balancer with [az network lb create](/cli/azure/network/lb#az-network-lb-create):\\n\\n```azurecli\\n  az network lb create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myLoadBalancer \\\\\\n    --sku Standard \\\\\\n    --public-ip-address myPublicIP \\\\\\n    --frontend-ip-name myFrontEnd \\\\\\n    --backend-pool-name myBackEndPool\\n```\\n\\nIf the public IP created is zonal, the specified zone needs to be defined when creating the public load balancer.\\n\\n```azurecli\\n  az network lb create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myLoadBalancer \\\\\\n    --sku Standard \\\\\\n    --public-ip-address myPublicIP \\\\\\n    --frontend-ip-name myFrontEnd \\\\\\n    --public-ip-zone 1 \\\\\\n    --backend-pool-name myBackEndPool\\n```\\n\\n### Create the health probe\\n\\nA health probe checks all virtual machine instances to ensure they can send network traffic. \\n\\nA virtual machine with a failed probe check is removed from the load balancer. The virtual machine is added back into the load balancer when the failure is resolved.\\n\\nCreate a health probe with [az network lb probe create](/cli/azure/network/lb/probe#az-network-lb-probe-create):\\n\\n```azurecli\\n  az network lb probe create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --lb-name myLoadBalancer \\\\\\n    --name myHealthProbe \\\\\\n    --protocol tcp \\\\\\n    --port 80\\n```\\n\\n### Create the load balancer rule\\n\\nA load balancer rule defines:\\n\\n* Frontend IP configuration for the incoming traffic\\n\\n* The backend IP pool to receive the traffic\\n\\n* The required source and destination port\\n\\nCreate a load balancer rule with [az network lb rule create](/cli/azure/network/lb/rule#az-network-lb-rule-create):\\n\\n```azurecli\\n  az network lb rule create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --lb-name myLoadBalancer \\\\\\n    --name myHTTPRule \\\\\\n    --protocol tcp \\\\\\n    --frontend-port 80 \\\\\\n    --backend-port 80 \\\\\\n    --frontend-ip-name myFrontEnd \\\\\\n    --backend-pool-name myBackEndPool \\\\\\n    --probe-name myHealthProbe \\\\\\n    --disable-outbound-snat true \\\\\\n    --idle-timeout 15 \\\\\\n    --enable-tcp-reset true\\n```\\n\\n## Create a network security group\\n\\nFor a standard load balancer, the VMs in the backend pool are required to have network interfaces that belong to a network security group. \\n\\nUse [az network nsg create](/cli/azure/network/nsg#az-network-nsg-create) to create the network security group:\\n\\n```azurecli\\n  az network nsg create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myNSG\\n```\\n\\n### Create a network security group rule\\n\\nCreate a network security group rule using [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create):\\n\\n```azurecli\\n  az network nsg rule create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --nsg-name myNSG \\\\\\n    --name myNSGRuleHTTP \\\\\\n    --protocol '*' \\\\\\n    --direction inbound \\\\\\n    --source-address-prefix '*' \\\\\\n    --source-port-range '*' \\\\\\n    --destination-address-prefix '*' \\\\\\n    --destination-port-range 80 \\\\\\n    --access allow \\\\\\n    --priority 200\\n```\\n\\n## Create a bastion host\\n\\nIn this section, you create the resources for Azure Bastion. Azure Bastion is used to securely manage the virtual machines in the backend pool of the load balancer.\\n\\n> [!IMPORTANT]\\n> [!INCLUDE [Pricing](~/reusable-content/ce-skilling/azure/includes/bastion-pricing.md)]\\n\\n### Create a public IP address\\n\\nUse [az network public-ip create](/cli/azure/network/public-ip#az-network-public-ip-create) to create a public ip address for the bastion host. The public IP is used by the bastion host for secure access to the virtual machine resources.\\n\\n```azurecli\\n  az network public-ip create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myBastionIP \\\\\\n    --sku Standard \\\\\\n    --zone 1 2 3\\n```\\n### Create a bastion subnet\\n\\nUse [az network vnet subnet create](/cli/azure/network/vnet/subnet#az-network-vnet-subnet-create) to create a bastion subnet. The bastion subnet is used by the bastion host to access the virtual network.\\n\\n```azurecli\\n  az network vnet subnet create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name AzureBastionSubnet \\\\\\n    --vnet-name myVNet \\\\\\n    --address-prefixes 10.1.1.0/27\\n```\\n\\n### Create bastion host\\n\\nUse [az network bastion create](/cli/azure/network/bastion#az-network-bastion-create) to create a bastion host. The bastion host is used to connect securely to the virtual machine resources created later in this article.\\n\\n```azurecli\\n  az network bastion create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myBastionHost \\\\\\n    --public-ip-address myBastionIP \\\\\\n    --vnet-name myVNet \\\\\\n    --location eastus\\n```\\n\\nIt can take a few minutes for the Azure Bastion host to deploy.\\n\\n## Create backend servers\\n\\nIn this section, you create:\\n\\n* Two network interfaces for the virtual machines\\n\\n* Two virtual machines to be used as backend servers for the load balancer\\n\\n### Create network interfaces for the virtual machines\\n\\nCreate two network interfaces with [az network nic create](/cli/azure/network/nic#az-network-nic-create):\\n\\n```azurecli\\n  array=(myNicVM1 myNicVM2)\\n  for vmnic in \\\"${array[@]}\\\"\\n  do\\n    az network nic create \\\\\\n        --resource-group CreatePubLBQS-rg \\\\\\n        --name $vmnic \\\\\\n        --vnet-name myVNet \\\\\\n        --subnet myBackEndSubnet \\\\\\n        --network-security-group myNSG\\n  done\\n```\\n\\n### Create virtual machines\\n\\nCreate the virtual machines with [az vm create](/cli/azure/vm#az-vm-create):\\n\\n```azurecli\\n  az vm create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myVM1 \\\\\\n    --nics myNicVM1 \\\\\\n    --image win2019datacenter \\\\\\n    --admin-username azureuser \\\\\\n    --zone 1 \\\\\\n    --no-wait\\n```\\n\\n```azurecli\\n  az vm create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myVM2 \\\\\\n    --nics myNicVM2 \\\\\\n    --image win2019datacenter \\\\\\n    --admin-username azureuser \\\\\\n    --zone 2 \\\\\\n    --no-wait\\n```\\n\\nIt may take a few minutes for the VMs to deploy. You can continue to the next steps while the VMs are creating.\\n\\n[!INCLUDE [ephemeral-ip-note.md](~/reusable-content/ce-skilling/azure/includes/ephemeral-ip-note.md)]\\n\\n### Add virtual machines to load balancer backend pool\\n\\nAdd the virtual machines to the backend pool with [az network nic ip-config address-pool add](/cli/azure/network/nic/ip-config/address-pool#az-network-nic-ip-config-address-pool-add):\\n\\n```azurecli\\n  array=(myNicVM1 myNicVM2)\\n  for vmnic in \\\"${array[@]}\\\"\\n  do\\n    az network nic ip-config address-pool add \\\\\\n     --address-pool myBackendPool \\\\\\n     --ip-config-name ipconfig1 \\\\\\n     --nic-name $vmnic \\\\\\n     --resource-group CreatePubLBQS-rg \\\\\\n     --lb-name myLoadBalancer\\n  done\\n```\\n\\n## Create NAT gateway\\n\\nTo provide outbound internet access for resources in the backend pool, create a NAT gateway.  \\n\\n### Create public IP\\n\\nUse [az network public-ip create](/cli/azure/network/public-ip#az-network-public-ip-create) to create a single IP for the outbound connectivity.  \\n\\n```azurecli\\n  az network public-ip create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myNATgatewayIP \\\\\\n    --sku Standard \\\\\\n    --zone 1 2 3\\n```\\n\\nTo create a zonal redundant public IP address in Zone 1 instead, use the following command:\\n\\n```azurecli\\n  az network public-ip create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myNATgatewayIP \\\\\\n    --sku Standard \\\\\\n    --zone 1\\n```\\n\\n### Create NAT gateway resource\\n\\nUse [az network nat gateway create](/cli/azure/network/nat#az-network-nat-gateway-create) to create the NAT gateway resource. The public IP created in the previous step is associated with the NAT gateway.\\n\\n```azurecli\\n  az network nat gateway create \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myNATgateway \\\\\\n    --public-ip-addresses myNATgatewayIP \\\\\\n    --idle-timeout 10\\n```\\n\\n### Associate NAT gateway with subnet\\n\\nConfigure the source subnet in virtual network to use a specific NAT gateway resource with [az network vnet subnet update](/cli/azure/network/vnet/subnet#az-network-vnet-subnet-update).\\n\\n```azurecli\\n  az network vnet subnet update \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --vnet-name myVNet \\\\\\n    --name myBackendSubnet \\\\\\n    --nat-gateway myNATgateway\\n```\\n\\n## Install IIS\\n\\nUse [az vm extension set](/cli/azure/vm/extension#az-vm-extension-set) to install IIS on the virtual machines and set the default website to the computer name.\\n\\n```azurecli\\n  array=(myVM1 myVM2)\\n    for vm in \\\"${array[@]}\\\"\\n    do\\n     az vm extension set \\\\\\n       --publisher Microsoft.Compute \\\\\\n       --version 1.8 \\\\\\n       --name CustomScriptExtension \\\\\\n       --vm-name $vm \\\\\\n       --resource-group CreatePubLBQS-rg \\\\\\n       --settings '{\\\"commandToExecute\\\":\\\"powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path \\\\\\\"C:\\\\\\\\inetpub\\\\\\\\wwwroot\\\\\\\\Default.htm\\\\\\\" -Value $($env:computername)\\\"}'\\n  done\\n```\\n\\n## Test the load balancer\\n\\nTo get the public IP address of the load balancer, use [az network public-ip show](/cli/azure/network/public-ip#az-network-public-ip-show). \\n\\nCopy the public IP address, and then paste it into the address bar of your browser.\\n\\n```azurecli\\n  az network public-ip show \\\\\\n    --resource-group CreatePubLBQS-rg \\\\\\n    --name myPublicIP \\\\\\n    --query ipAddress \\\\\\n    --output tsv\\n```\\n:::image type=\\\"content\\\" source=\\\"./media/load-balancer-standard-public-cli/running-nodejs-app.png\\\" alt-text=\\\"Test the load balancer\\\" border=\\\"true\\\":::\\n\\n## Clean up resources\\n\\nWhen no longer needed, use the [az group delete](/cli/azure/group#az-group-delete) command to remove the resource group, load balancer, and all related resources.\\n\\n```azurecli\\n  az group delete \\\\\\n    --name CreatePubLBQS-rg\\n```\\n\\n## Next steps\\n\\nIn this quickstart:\\n\\n* You created a standard public load balancer\\n\\n* Attached two virtual machines\\n\\n* Configured the load balancer traffic rule and health probe\\n\\n* Tested the load balancer\\n\\nTo learn more about Azure Load Balancer, continue to:\\n> [!div class=\\\"nextstepaction\\\"]\\n> [What is Azure Load Balancer?](load-balancer-overview.md)\\n\", \"published_source\": \"https://raw.githubusercontent.com/MicrosoftDocs/azure-docs/refs/heads/main/articles/load-balancer/quickstart-load-balancer-standard-public-cli.md\", \"meta_data\": {}, \"sections\": [{\"py/object\": \"document.Section\", \"name\": \"Overview\", \"requires_test\": false, \"instance\": {\"py/object\": \"overview.Overview\", \"title\": \"Overview - Quickstart: Create a public load balancer\", \"meta_data\": {}, \"content\": \"## Overview\\n\\nThis document provides a step-by-step guide to creating a public load balancer in Azure using the Azure CLI. A public load balancer is a critical resource for distributing incoming internet traffic across multiple virtual machines (VMs) in a backend pool, ensuring high availability and scalability for applications. The guide includes instructions for deploying all necessary resources, such as virtual networks, subnets, public IP addresses, backend VMs, and additional components like Azure Bastion and NAT Gateway. This quickstart is ideal for users looking to set up a load balancer to manage internet traffic for their applications hosted on Azure.\\n\\n### Major Components\\n\\n* **Resource Group** - A logical container to manage and organize all resources deployed for the load balancer setup.\\n* **Virtual Network and Subnets** - Provides the networking infrastructure for the load balancer and backend VMs.\\n* **Public IP Address** - Enables internet-facing access to the load balancer.\\n* **Load Balancer** - Distributes incoming traffic across backend VMs, with components such as frontend IP pool, backend pool, health probes, and load balancing rules.\\n* **Network Security Group (NSG)** - Ensures secure inbound and outbound traffic for backend VMs.\\n* **Azure Bastion** - Provides secure access to backend VMs without exposing them to the internet.\\n* **Backend Virtual Machines** - Hosts the application workloads that the load balancer distributes traffic to.\\n* **NAT Gateway** - Provides outbound internet connectivity for backend resources.\\n* **IIS Installation** - Configures backend VMs with a web server to test the load balancer setup.\\n\\n### Decision Points\\n\\nIn this architecture, users will need to make several decisions that impact performance, cost, and scalability. Key decision points include:\\n\\n1. **Resource Group Location**: Choose the Azure region where resources will be deployed. Factors include proximity to users, compliance requirements, and cost.\\n2. **Virtual Network Configuration**: Define address spaces and subnet sizes based on anticipated traffic and resource requirements.\\n3. **Public IP Address SKU**: Select between Basic and Standard SKUs. Standard SKU supports zone redundancy and is recommended for production workloads.\\n4. **Load Balancer SKU**: Choose between Basic and Standard SKUs. Standard SKU offers advanced features like high availability zones and secure by default settings.\\n5. **Health Probe Configuration**: Determine the protocol (TCP/HTTP), port, and frequency for health checks to ensure backend VM availability.\\n6. **Load Balancer Rules**: Configure traffic distribution rules, including frontend/backend ports, protocol, and idle timeout settings.\\n7. **VM Size and Image**: Select VM sizes and operating system images based on application requirements and budget.\\n8. **NAT Gateway Idle Timeout**: Configure timeout settings for outbound connections based on application behavior.\\n9. **Azure Bastion Deployment**: Decide whether to deploy Azure Bastion for secure VM management, considering its cost and security benefits.\\n\\nEach decision point involves trade-offs between cost, performance, and scalability. Additional details on these choices will be provided in the relevant sections of the document.\\n\\n### Alternatives\\n\\nWhile this document focuses on deploying a public load balancer using the Azure CLI, alternative approaches and configurations exist:\\n\\n1. **Basic Load Balancer**: A simpler and lower-cost option for non-critical workloads. However, it lacks advanced features like zone redundancy and secure defaults.\\n2. **Application Gateway**: Provides Layer 7 (HTTP/HTTPS) load balancing with features like SSL termination, Web Application Firewall (WAF), and URL-based routing. Suitable for web applications requiring advanced traffic management.\\n3. **Azure Front Door**: A global load balancing solution for high-performance web applications. Offers features like caching, SSL offloading, and traffic acceleration.\\n4. **Azure Traffic Manager**: A DNS-based traffic routing solution for distributing traffic across multiple regions or endpoints.\\n\\nEach alternative has specific use cases and trade-offs. For example, Application Gateway is ideal for web applications requiring Layer 7 routing, while Azure Front Door is suited for global-scale applications needing fast content delivery. The choice depends on the workload requirements and desired features.\"}}, {\"py/object\": \"document.Section\", \"name\": \"Deployment\", \"requires_test\": true, \"instance\": {\"py/object\": \"deployment.Deployment\", \"title\": \"Deployment - Quickstart: Create a public load balancer\", \"meta_data\": {}, \"content\": \"## Prerequisites\\n\\nThe following prerequisites are required before you are able to work through this document.\\n\\n- Az CLI is installed and you are logged in to an active Azure subscription.\\n\\n```bash\\nexport SUFFIX=$(date +%s%N | sha256sum | head -c 6)\\n```\\n\\n---\\n\\n## Step 1: Create a Resource Group\\n\\nThe resource group is a logical container that will hold all the resources for the load balancer setup. \\n\\nDefine the following environment variables:\\n\\n```bash\\nexport RESOURCE_GROUP_NAME_ED42=\\\"LoadBalancerRG_$SUFFIX\\\" # Name of the resource group\\nexport REGION_ED42=\\\"westus2\\\" # Azure region for deployment\\n```\\n\\nCreate the resource group:\\n\\n```bash\\naz group create --name $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --location $REGION_ED42\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx\\\",\\n    \\\"location\\\": \\\"westus2\\\",\\n    \\\"managedBy\\\": null,\\n    \\\"name\\\": \\\"LoadBalancerRG_xxxxxx\\\",\\n    \\\"properties\\\": {\\n        \\\"provisioningState\\\": \\\"Succeeded\\\"\\n    },\\n    \\\"tags\\\": null,\\n    \\\"type\\\": \\\"Microsoft.Resources/resourceGroups\\\"\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: Resource groups do not incur costs directly, but they help organize resources for easier management. Choose a region close to your users for lower latency and compliance requirements.\\n\\n---\\n\\n## Step 2: Create a Virtual Network and Subnets\\n\\nThe virtual network provides the networking infrastructure for the load balancer and backend VMs. Subnets segment the network for better organization and security.\\n\\nDefine the following environment variables:\\n\\n```bash\\nexport VNET_NAME_ED42=\\\"LoadBalancerVNet_$SUFFIX\\\" # Name of the virtual network\\nexport VNET_ADDRESS_PREFIX_ED42=\\\"10.0.0.0/16\\\" # Address space for the virtual network\\nexport SUBNET_NAME_ED42=\\\"BackendSubnet_$SUFFIX\\\" # Name of the subnet\\nexport SUBNET_ADDRESS_PREFIX_ED42=\\\"10.0.1.0/24\\\" # Address space for the subnet\\n```\\n\\nCreate the virtual network and subnet:\\n\\n```bash\\naz network vnet create --resource-group $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --name $VNET_NAME_ED42 \\\\\\n    --address-prefix $VNET_ADDRESS_PREFIX_ED42 \\\\\\n    --subnet-name $SUBNET_NAME_ED42 \\\\\\n    --subnet-prefix $SUBNET_ADDRESS_PREFIX_ED42\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"newVNet\\\": {\\n        \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx/providers/Microsoft.Network/virtualNetworks/LoadBalancerVNet_xxxxxx\\\",\\n        \\\"location\\\": \\\"westus2\\\",\\n        \\\"name\\\": \\\"LoadBalancerVNet_xxxxxx\\\",\\n        \\\"properties\\\": {\\n            \\\"addressSpace\\\": {\\n                \\\"addressPrefixes\\\": [\\n                    \\\"10.0.0.0/16\\\"\\n                ]\\n            },\\n            \\\"subnets\\\": [\\n                {\\n                    \\\"name\\\": \\\"BackendSubnet_xxxxxx\\\",\\n                    \\\"properties\\\": {\\n                        \\\"addressPrefix\\\": \\\"10.0.1.0/24\\\"\\n                    }\\n                }\\n            ]\\n        }\\n    }\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: Ensure the address space is large enough to accommodate future growth. Subnets help isolate resources for security and better traffic management.\\n\\n---\\n\\n## Step 3: Create a Public IP Address\\n\\nThe public IP address enables internet-facing access to the load balancer.\\n\\nDefine the following environment variables:\\n\\n```bash\\nexport PUBLIC_IP_NAME_ED42=\\\"LoadBalancerPublicIP_$SUFFIX\\\" # Name of the public IP address\\nexport PUBLIC_IP_SKU_ED42=\\\"Standard\\\" # SKU for the public IP address (Basic or Standard)\\n```\\n\\nCreate the public IP address:\\n\\n```bash\\naz network public-ip create --resource-group $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --name $PUBLIC_IP_NAME_ED42 \\\\\\n    --sku $PUBLIC_IP_SKU_ED42 \\\\\\n    --allocation-method Static\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"publicIp\\\": {\\n        \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx/providers/Microsoft.Network/publicIPAddresses/LoadBalancerPublicIP_xxxxxx\\\",\\n        \\\"location\\\": \\\"westus2\\\",\\n        \\\"name\\\": \\\"LoadBalancerPublicIP_xxxxxx\\\",\\n        \\\"properties\\\": {\\n            \\\"provisioningState\\\": \\\"Succeeded\\\",\\n            \\\"publicIpAllocationMethod\\\": \\\"Static\\\",\\n            \\\"sku\\\": {\\n                \\\"name\\\": \\\"Standard\\\"\\n            }\\n        }\\n    }\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: Standard SKU supports zone redundancy and is recommended for production workloads. Static allocation ensures the IP does not change, which is ideal for DNS configurations.\\n\\n---\\n\\n## Step 4: Create the Load Balancer\\n\\nThe load balancer distributes incoming traffic across backend VMs. This step configures the frontend IP pool, backend pool, health probes, and load balancing rules.\\n\\nDefine the following environment variables:\\n\\n```bash\\nexport LOAD_BALANCER_NAME_ED42=\\\"PublicLoadBalancer_$SUFFIX\\\" # Name of the load balancer\\n```\\n\\nCreate the load balancer:\\n\\n```bash\\naz network lb create --resource-group $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --name $LOAD_BALANCER_NAME_ED42 \\\\\\n    --sku Standard \\\\\\n    --frontend-ip-name FrontendIP_$SUFFIX \\\\\\n    --public-ip-address $PUBLIC_IP_NAME_ED42 \\\\\\n    --backend-pool-name BackendPool_$SUFFIX\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"loadBalancer\\\": {\\n        \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx/providers/Microsoft.Network/loadBalancers/PublicLoadBalancer_xxxxxx\\\",\\n        \\\"location\\\": \\\"westus2\\\",\\n        \\\"name\\\": \\\"PublicLoadBalancer_xxxxxx\\\",\\n        \\\"properties\\\": {\\n            \\\"frontendIPConfigurations\\\": [\\n                {\\n                    \\\"name\\\": \\\"FrontendIP_xxxxxx\\\",\\n                    \\\"properties\\\": {\\n                        \\\"publicIPAddress\\\": {\\n                            \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx/providers/Microsoft.Network/publicIPAddresses/LoadBalancerPublicIP_xxxxxx\\\"\\n                        }\\n                    }\\n                }\\n            ],\\n            \\\"backendAddressPools\\\": [\\n                {\\n                    \\\"name\\\": \\\"BackendPool_xxxxxx\\\"\\n                }\\n            ]\\n        }\\n    }\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: Standard SKU provides advanced features like zone redundancy and secure defaults. Configure health probes and load balancing rules based on application requirements.\\n\\n---\\n\\n## Step 5: Create Backend Virtual Machines\\n\\nThe backend VMs host the application workloads distributed by the load balancer.\\n\\nDefine the following environment variables:\\n\\n```bash\\nexport VM_NAME_ED42=\\\"BackendVM_$SUFFIX\\\" # Name of the virtual machine\\nexport VM_SIZE_ED42=\\\"Standard_B1s\\\" # Size of the virtual machine\\nexport VM_IMAGE_ED42=\\\"Win2019Datacenter\\\" # Operating system image\\nexport ADMIN_USERNAME_ED42=\\\"azureuser\\\" # Admin username for the VM\\nexport ADMIN_PASSWORD_ED42=\\\"Password123!\\\" # Admin password for the VM\\n```\\n\\nCreate the backend VM:\\n\\n```bash\\naz vm create --resource-group $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --name $VM_NAME_ED42 \\\\\\n    --image $VM_IMAGE_ED42 \\\\\\n    --size $VM_SIZE_ED42 \\\\\\n    --admin-username $ADMIN_USERNAME_ED42 \\\\\\n    --admin-password $ADMIN_PASSWORD_ED42 \\\\\\n    --vnet-name $VNET_NAME_ED42 \\\\\\n    --subnet $SUBNET_NAME_ED42 \\\\\\n    --nsg \\\"\\\" \\\\\\n    --location $REGION_ED42\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx/providers/Microsoft.Compute/virtualMachines/BackendVM_xxxxxx\\\",\\n    \\\"location\\\": \\\"westus2\\\",\\n    \\\"name\\\": \\\"BackendVM_xxxxxx\\\",\\n    \\\"properties\\\": {\\n        \\\"provisioningState\\\": \\\"Succeeded\\\"\\n    }\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: Choose VM sizes based on workload requirements. Smaller sizes like `Standard_B1s` are cost-effective for testing, while larger sizes may be needed for production workloads.\\n\\n---\\n\\n## Step 6: Install IIS on Backend VM\\n\\nInstall IIS to configure the backend VM with a web server for testing the load balancer setup.\\n\\nRun the following script on the backend VM using Azure CLI or remote access:\\n\\n```bash\\naz vm run-command invoke --resource-group $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --name $VM_NAME_ED42 \\\\\\n    --command-id RunPowerShellScript \\\\\\n    --scripts \\\"Install-WindowsFeature -name Web-Server -IncludeManagementTools\\\"\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"value\\\": [\\n        {\\n            \\\"code\\\": \\\"ComponentStatus/StdOut/succeeded\\\",\\n            \\\"level\\\": \\\"Info\\\",\\n            \\\"displayStatus\\\": \\\"Provisioning succeeded\\\",\\n            \\\"message\\\": \\\"Success: IIS has been installed.\\\"\\n        }\\n    ]\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: IIS installation is lightweight and suitable for testing. For production, ensure the VM is configured with necessary security and performance optimizations.\\n\\n---\\n\\n## Step 7: Create Azure Bastion\\n\\nAzure Bastion provides secure access to backend VMs without exposing them to the internet.\\n\\nDefine the following environment variables:\\n\\n```bash\\nexport BASTION_NAME_ED42=\\\"BastionHost_$SUFFIX\\\" # Name of the Azure Bastion host\\n```\\n\\nCreate Azure Bastion:\\n\\n```bash\\naz network bastion create --resource-group $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --name $BASTION_NAME_ED42 \\\\\\n    --vnet-name $VNET_NAME_ED42 \\\\\\n    --location $REGION_ED42\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx/providers/Microsoft.Network/bastionHosts/BastionHost_xxxxxx\\\",\\n    \\\"location\\\": \\\"westus2\\\",\\n    \\\"name\\\": \\\"BastionHost_xxxxxx\\\",\\n    \\\"properties\\\": {\\n        \\\"provisioningState\\\": \\\"Succeeded\\\"\\n    }\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: Azure Bastion improves security by eliminating the need for public IPs on VMs. It incurs additional costs but is highly recommended for production environments.\\n\\n---\\n\\n## Step 8: Create NAT Gateway\\n\\nThe NAT Gateway provides outbound internet connectivity for backend resources.\\n\\nDefine the following environment variables:\\n\\n```bash\\nexport NAT_GATEWAY_NAME_ED42=\\\"NATGateway_$SUFFIX\\\" # Name of the NAT Gateway\\n```\\n\\nCreate the NAT Gateway:\\n\\n```bash\\naz network nat gateway create --resource-group $RESOURCE_GROUP_NAME_ED42 \\\\\\n    --name $NAT_GATEWAY_NAME_ED42 \\\\\\n    --public-ip-addresses $PUBLIC_IP_NAME_ED42 \\\\\\n    --location $REGION_ED42\\n```\\n\\nThis command will output results similar to the following:\\n\\n<!-- expected_similarity=0.3 -->\\n\\n```text\\n{\\n    \\\"id\\\": \\\"/subscriptions/xxxxx-xxxxx-xxxxx-xxxxx/resourceGroups/LoadBalancerRG_xxxxxx/providers/Microsoft.Network/natGateways/NATGateway_xxxxxx\\\",\\n    \\\"location\\\": \\\"westus2\\\",\\n    \\\"name\\\": \\\"NATGateway_xxxxxx\\\",\\n    \\\"properties\\\": {\\n        \\\"provisioningState\\\": \\\"Succeeded\\\"\\n    }\\n}\\n```\\n\\nPerformance, cost, and reliability considerations: NAT Gateway ensures reliable outbound connectivity and reduces idle timeout issues. It incurs additional costs but is essential for production workloads.\\n\\n---\\n\\nThis completes the deployment of the public load balancer architecture.\"}}, {\"py/object\": \"document.Section\", \"name\": \"Summary\", \"requires_test\": false, \"instance\": {\"py/object\": \"summary.Summary\", \"title\": \"Summary\", \"meta_data\": {}, \"content\": \"## Summary\\n\\nThis document detailed the architecture and step-by-step process for deploying a simple Python Flask application to Microsoft Azure using Azure App Service. The purpose of the architecture was to provide a lightweight, fully managed solution for hosting a Flask-based web application, ideal for small-scale projects, prototypes, or educational use cases. By leveraging Azure App Service, developers were able to focus on application development without the need to manage underlying infrastructure.\\n\\nKey decision points included selecting an App Service Plan SKU, choosing an Azure region, configuring scaling options, determining deployment methods, and evaluating the need for persistent storage. The Free tier of the App Service Plan was recommended for demonstration purposes, while higher tiers were suggested for production workloads. Alternatives such as Azure Kubernetes Service, Azure Functions, and Virtual Machines were discussed for scenarios requiring more control, scalability, or customization.\\n\\n### Next Steps\\n\\n* **Test the Application** - Verify the functionality of the deployed Flask application by accessing its URL and ensuring it operates as expected.\\n* **Enable Monitoring** - Set up Azure Monitor or Application Insights to track performance, availability, and cost metrics for the deployed application.\\n* **Optimize for Production** - Evaluate scaling options, upgrade the App Service Plan tier, and integrate CI/CD pipelines for streamlined production deployments.\"}}]}"